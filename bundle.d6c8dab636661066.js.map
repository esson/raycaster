{"version":3,"file":"bundle.d6c8dab636661066.js","mappings":"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IU,GAAOK,EAAYL,KAAMgB,SAAQxD,GAAKA,EAAEgD,YAAc7B,EAA0BnB,EAAEgD,eAC/GP,OAAOc,KAAKV,GAAaf,KAAIU,GAAOK,EAAYL,KAAMgB,SAAQxD,GAAKA,EAAEiD,gBAAkB9B,EAA0BnB,EAAEiD,mBACnHR,OAAOc,KAAKF,GAAevB,KAAIU,GAAOa,EAAcb,KAAMgB,SAAQxD,GAAKA,EAAEqC,OAASlB,EAA0BnB,EAAEqC,UAEvG,CACHoB,MAAO,IAAI3D,EAAO,GAAI,IAAIK,IAAI,IAE9BuD,QAAS,UACTnC,MAAO,UAEPoC,MAnTU,CACV,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,mEA0Pa7B,IAAIN,EAAyBU,GAAa,IACvD0B,UA9Nc,CACd,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,mEAqKqB9B,IAAIN,EAAyBU,GAAa,IAAQJ,KAAI,CAACF,EAAK3B,IAAM2B,EAAIE,KAAI,CAACC,EAAK/B,KAC7F+B,IACAA,EAAImB,OAAS,EACbnB,EAAIoB,SAAW,EACfpB,EAAI8B,KAAO,EACX9B,EAAI+B,KAAO,GAER/B,OAEXgC,MA3KU,CACV,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,mEAkHajC,IAAIN,EAAyBqB,GAAa,IACvDmB,QA3GY,CACZ,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,kEACA,mEAkDiBlC,IAAIN,EAAyB6B,GAAe,GAAO,IAEpEY,UAAW,eAiBDC,GChTlB,EArCY,CACRC,WAAY,GACZC,MAAO,EACPC,SAAU,GACVC,QAAS,EACTC,YAAY,EACZC,KAAM,WAEF,IAAKtE,KAAKqE,WAEN,OADArE,KAAKqE,WAAaE,YAAYC,MACvB,EAGX,IAAIA,EAAMD,YAAYC,MAElBC,EAAM,IADGD,EAAMxE,KAAKqE,YAAc,KAGtCrE,KAAKmE,SAASnE,KAAKoE,SAAWtD,KAAK4D,MAAMD,GAGzC,IAAIE,EAAU,EACd,IAAK,IAAIC,EAAI,EAAGA,EAAI5E,KAAKmE,SAASU,OAAQD,IAAKD,GAAW3E,KAAKmE,SAASS,GAYxE,OAVAD,EAAU7D,KAAK4D,MAAMC,EAAU3E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","sources":["webpack://raycaster/./src/vector.js","webpack://raycaster/./src/sprites.js","webpack://raycaster/./src/level-1-1.js","webpack://raycaster/./src/fps.js","webpack://raycaster/./src/performance-counter.js","webpack://raycaster/./src/script.js"],"sourcesContent":["export default class Vector {\r\n\r\n  constructor(x, y) {\r\n    if (x instanceof Vector) {\r\n      y = x.y;\r\n      x = x.x;\r\n    }\r\n    if (typeof y !== 'number') {\r\n      y = x;\r\n    }\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  add(x, y) {\r\n    return this.operate(x, y, '+');\r\n  }\r\n\r\n  subtract(x, y) {\r\n    return this.operate(x, y, '-');\r\n  }\r\n\r\n  multiply(x, y) {\r\n    return this.operate(x, y, '*');\r\n  }\r\n\r\n  divide(x, y) {\r\n    return this.operate(x, y, '/');\r\n  }\r\n\r\n  operate(x, y, operation) {\r\n    if (x instanceof Vector) {\r\n      y = x.y;\r\n      x = x.x;\r\n    }\r\n    if (typeof y !== 'number') {\r\n      y = x;\r\n    }\r\n    switch (operation) {\r\n      case '+':\r\n        return new Vector(this.x + x, this.y + y);\r\n      case '-':\r\n        return new Vector(this.x - x, this.y - y);\r\n      case '*':\r\n        return new Vector(this.x * x, this.y * y);\r\n      case '/':\r\n        return new Vector(this.x / x, this.y / y);\r\n    }\r\n  }\r\n\r\n  distance(vector) {\r\n    return Vector.distance(this.x, this.y, vector.x, vector.y);\r\n  }\r\n\r\n  toArray() {\r\n    return [this.x, this.y];\r\n  }\r\n\r\n  static distance(x1, y1, x2, y2) {\r\n    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\r\n  }\r\n}","import Vector from \"./vector\";\r\n/**\r\n * Converts a spritesheet index to actual pixel coordinates, given all sprites are square.\r\n * @param {number} index The index of the image.\r\n * @param {number} cols The number of sprite columns in the sprite sheet.\r\n * @param {number} size The width/height of a sprite.\r\n * @returns \r\n */\r\nexport function getSpritesheetCoordinates(index, cols = 16, size = 65) {\r\n    return new Vector(index % cols, Math.floor(index / cols)).multiply(size);\r\n}","import Vector from './vector';\r\nimport { getSpritesheetCoordinates } from './sprites';\r\n\r\nfunction createLevel() {\r\n\r\n    const walls = [\r\n        '                            3339333339333                      ',\r\n        '     111111                 3           3                      ',\r\n        '     1    1      111111181119           93333                  ',\r\n        '     1    1      1          3           3   3                  ',\r\n        '     1     1     1                          9                  ',\r\n        '     1     1     1          3           3   3                  ',\r\n        '     11611 11611 1   1118111c           c3333                  ',\r\n        '     1         1 1   1      3           3                      ',\r\n        '     8         811   111     33933 339333                      ',\r\n        '     1         1       1        3   3                          ',\r\n        '     1                 1        3   3                          ',\r\n        '     1         1       1        c   c                          ',\r\n        '111118         811161111        3   3                          ',\r\n        '1   11         1                3   3                          ',\r\n        '1   111611 1161            333333   333                        ',\r\n        '1   1   1   1              3          3                        ',\r\n        '11 11   8   8              3  333   333                        ',\r\n        '1   11111   1              3  333   3                          ',\r\n        '1   1   1   1              3  333   3                          ',\r\n        '1       8   8              333339   9                          ',\r\n        '1   1   1   1                   3   3                          ',\r\n        '1   111111 11111                39 93                2222222222',\r\n        '8   81         1          111181     1811111         2        2',\r\n        '1   11         8          1               11         2        2',\r\n        '1   11         1          6               622222222222        2',\r\n        '1    1         1          1                2         2        2',\r\n        '1              8          1                                   4',\r\n        '1    1         1          1                2         2        2',\r\n        '1   11         1          6               6222    2222        2',\r\n        '1   11         8          1               11122  2   2        2',\r\n        '1   11         1          117111     111711   2  2   2        2',\r\n        '7   711111 11111               122 22         2  2   222 22 222',\r\n        '1   11111   1                   2   2         2  2      2  2   ',\r\n        '1   11111   1                   2   2         2  2             ',\r\n        '1   1   1   1                   2   2         2  2  2 2 2 2    ',\r\n        '1       8   8                   2   2         2  222 2 2 2 22  ',\r\n        '1   1   1   1                   2   2         2   2         2  ',\r\n        '1   11111   1                   2   2         2             4  ',\r\n        '1   11111   1111111116111       2   2         2   2         2  ',\r\n        '1                1      8e1     2   2         222222 2 2 2 22  ',\r\n        '1                         a     2   2               2 2 2 2    ',\r\n        '1                1      8e1     2   2                          ',\r\n        '111111111171111111 116111       2   2                          ',\r\n        '          e8  1     1      2222222 2222222                     ',\r\n        '         a    1  1 1       2    2   2    2                     ',\r\n        '          e8     11        2             2                     ',\r\n        '            1 1111         2    2   2    2                     ',\r\n        '            1  1           2    2   2    2                     ',\r\n        '            1  1           222222   222222                     ',\r\n        '            1111           2    2   2    2                     ',\r\n        '                           2             2                     ',\r\n        '                           2    2   2    2                     ',\r\n        '                           222222   222222                     ',\r\n        '                           2             2                     ',\r\n        '                           2             2                     ',\r\n        '                           2             2                     ',\r\n        '                           242242252242242                     '\r\n    ];\r\n\r\n    const wallSprites = {\r\n        '1': { color: '#797979', darkColor: '#616161', sprite:  0, darkSprite:  1 }, // Stone Wall\r\n        '2': { color: '#09096f', darkColor: '#070759', sprite: 14, darkSprite: 15 }, // Blue Stone Wall\r\n        '3': { color: '#604220', darkColor: '#4d351a', sprite: 22, darkSprite: 23 }, // Wood Panel Wall\r\n        '4': { color: '#09096f', darkColor: '#070759', sprite:  8, darkSprite:  9 }, // Blue Stone Wall - Cell\r\n        '5': { color: '#09096f', darkColor: '#070759', sprite: 12, darkSprite: 13 }, // Blue Stone Wall - Cell Skeleton\r\n        '6': { color: '#797979', darkColor: '#616161', sprite: 10, darkSprite: 11 }, // Stone Wall - Eagle Valve\r\n        '7': { color: '#797979', darkColor: '#616161', sprite:  6, darkSprite:  7 }, // Stone Wall - Monster Painting\r\n        '8': { color: '#797979', darkColor: '#616161', sprite:  4, darkSprite:  5 }, // Stone Wall - Flag\r\n        '9': { color: '#604220', darkColor: '#4d351a', sprite: 18, darkSprite: 19 }, // Wood Panel Wall - Painting\r\n        'a': { color: '#797979', darkColor: '#616161', sprite: 41, darkSprite: 41, next: 'b' }, // Elevator Controls Off Wall\r\n        'b': { color: '#797979', darkColor: '#616161', sprite: 43, darkSprite: 43, next: 'a' }, // Elevator Controls On Wall\r\n        'c': { color: '#604220', darkColor: '#4d351a', sprite: 20, darkSprite: 21 }, // Wood Panel Wall - Monster Painting\r\n        'e': { color: '#797979', darkColor: '#616161', sprite: 40, darkSprite: 40 }, // Elevator Side Wall\r\n    };\r\n\r\n    // Link walls that references each other, like a toggle switch\r\n    for (const key in wallSprites) {\r\n        if (Object.hasOwnProperty.call(wallSprites, key)) {\r\n            const wallSprite = wallSprites[key];\r\n            if (wallSprite.next) {\r\n                wallSprite.next = wallSprites[wallSprite.next];\r\n            }\r\n        }\r\n    }\r\n\r\n    const pushWalls = [\r\n        '                            -------------                      ',\r\n        '     ------                 -           -                      ',\r\n        '     -    -      ------------           -----                  ',\r\n        '     -    -      -          -           -   -                  ',\r\n        '     -     -     -                          -                  ',\r\n        '     -     -     -          -           -   -                  ',\r\n        '     -----7----- -   --------           -----                  ',\r\n        '     -         - -   -      -           -                      ',\r\n        '     -         ---   ---     ----- ------                      ',\r\n        '     -         -       -        -   -                          ',\r\n        '     -                 -        -   -                          ',\r\n        '     -         -       -        -   -                          ',\r\n        '------         ---------        -   -                          ',\r\n        '-   --         -                -   -                          ',\r\n        '-   ------ ----            ------   ---                        ',\r\n        '-   -   -   -              -  9       -                        ',\r\n        '-- --   -   -              -  ---   ---                        ',\r\n        '-   -----   -              -  ---   -                          ',\r\n        '-   -   -   -              -  ---   -                          ',\r\n        '-       -   -              ------   -                          ',\r\n        '-   -   -   -                   -   -                          ',\r\n        '-   ------ -----                -- --                ----------',\r\n        '-   --         -          ------     -------         -        -',\r\n        '-   --         -          -               --         -        -',\r\n        '-   --         -          -               ------------        -',\r\n        '-    -         -          -                -         -        -',\r\n        '-              -          -                                   -',\r\n        '-    -         -          -                -         -        -',\r\n        '-   --         -          -               ----    ----        -',\r\n        '-   --         -          -               -----  -   -        -',\r\n        '-   --         -          ------     ------   -  -   -        -',\r\n        '-   ------ -----               --- --         -  -   --- -- ---',\r\n        '-   -----   -                   -   -         -  -      -  -   ',\r\n        '-   -----   -                   -   -         -  -             ',\r\n        '-   -   -   -                   -   -         -  -  - - - -    ',\r\n        '-       -   -                   -   -         -  --- - - - --  ',\r\n        '-   -   -   -                   -   -         -   -         -  ',\r\n        '-   -----   -                   -   -         -             -  ',\r\n        '-   -----   -------------       -   -         -   -         -  ',\r\n        '-                -      ---     -   -         ------ - - - --  ',\r\n        '-                         -     -   -               - - - -    ',\r\n        '-                -      ---     -   -                          ',\r\n        '------------------1------       -   -                          ',\r\n        '          --  -  1  -      ------- -------                     ',\r\n        '         -    -  - -       -    -   -    -                     ',\r\n        '          --     --        -             -                     ',\r\n        '            -1----         -    -   -    -                     ',\r\n        '            -  -           -    -   -    -                     ',\r\n        '            -  -           ------   ------                     ',\r\n        '            ----           -    -   -    -                     ',\r\n        '                           -             -                     ',\r\n        '                           -    -   -    -                     ',\r\n        '                           ------   ------                     ',\r\n        '                           -             -                     ',\r\n        '                           -             -                     ',\r\n        '                           -             -                     ',\r\n        '                           ---------------                     '\r\n    ];\r\n\r\n    const doors = [\r\n        '                            -------------                      ',\r\n        '     ------                 -           -                      ',\r\n        '     -    -      ------------           -----                  ',\r\n        '     -    -      -          -           -   -                  ',\r\n        '     -     -     -          1           1   -                  ',\r\n        '     -     -     -          -           -   -                  ',\r\n        '     ----- ----- -   --------           -----                  ',\r\n        '     -         - -   -      -           -                      ',\r\n        '     -         ---   ---     -----1------                      ',\r\n        '     -         -       -        -   -                          ',\r\n        '     -         1       -        -   -                          ',\r\n        '     -         -       -        -   -                          ',\r\n        '------         ---------        -   -                          ',\r\n        '-   --         -                -   -                          ',\r\n        '-   ------1----            ------   ---                        ',\r\n        '-   -   -   -              -          -                        ',\r\n        '--1--   -   -              -  ---   ---                        ',\r\n        '-   -----   -              -  ---   -                          ',\r\n        '-   -   -   -              -  ---   -                          ',\r\n        '-       -   -              ------   -                          ',\r\n        '-   -   -   -                   -   -                          ',\r\n        '-   ------1-----                --1--                ----------',\r\n        '-   --         -          ------     -------         -        -',\r\n        '-   --         -          -               --         -        -',\r\n        '-   --         -          -               ------------        -',\r\n        '-    -         -          -                -         -        -',\r\n        '-    1         -          -                1         1        -',\r\n        '-    -         -          -                -         -        -',\r\n        '-   --         -          -               ----    ----        -',\r\n        '-   --         -          -               -----  -   -        -',\r\n        '-   --         -          ------     ------   -  -   -        -',\r\n        '-   ------1-----               ---1--         -  -   --- -- ---',\r\n        '-   -----   -                   -   -         -  -      -  -   ',\r\n        '-   -----   -                   -   -         -  -             ',\r\n        '-   -   -   -                   -   -         -  -  - - - -    ',\r\n        '-       -   -                   -   -         -  --- - - - --  ',\r\n        '-   -   -   -                   -   -         -   -         -  ',\r\n        '-   -----   -                   -   -         -   1         -  ',\r\n        '-   -----   -------------       -   -         -   -         -  ',\r\n        '-                -      ---     -   -         ------ - - - --  ',\r\n        '-                1      2 -     -   -               - - - -    ',\r\n        '-                -      ---     -   -                          ',\r\n        '------------------ ------       -   -                          ',\r\n        '          --  -     -      -------1-------                     ',\r\n        '         - 2  -  - -       -    -   -    -                     ',\r\n        '          --     --        -    1   1    -                     ',\r\n        '            - ----         -    -   -    -                     ',\r\n        '            -  -           -    -   -    -                     ',\r\n        '            -  -           ------   ------                     ',\r\n        '            ----           -    -   -    -                     ',\r\n        '                           -    1   1    -                     ',\r\n        '                           -    -   -    -                     ',\r\n        '                           ------   ------                     ',\r\n        '                           -             -                     ',\r\n        '                           -             -                     ',\r\n        '                           -             -                     ',\r\n        '                           ---------------                     '\r\n    ];\r\n\r\n    const doorSprites = {\r\n        '1': { color: '#00a4a4', darkColor: '#297979', sprite: 98, darkSprite: 99, frameColor: '#00a4a4', frameDarkColor: '#297979', frameSprite: 100, frameDarkSprite: 101, action: 2, position: 0, ticks: 0 }, // Normal Door\r\n        '2': { color: '#cccccc', darkColor: '#dddddd', sprite: 102, darkSprite: 103, frameColor: '#cccccc', frameDarkColor: '#dddddd', frameSprite: 100, frameDarkSprite: 101, action: 2, position: 0, ticks: 0 }, // Elevator Door\r\n    };\r\n\r\n    const objects = [\r\n        '                            -------------                      ',\r\n        '     ------                 -8         8-                      ',\r\n        '     -    -      ------------  a  a  a  -----                  ',\r\n        '     -    -      -          -           -   -                  ',\r\n        '     -     -     - 2    2         6         -                  ',\r\n        '     -     -     -          -           -   -                  ',\r\n        '     ----- ----- -   --------           -----                  ',\r\n        '     -   1 1   - -   -      -           -                      ',\r\n        '     - b     b ---   ---     ----- ------                      ',\r\n        '     -         -       -        -   -                          ',\r\n        '     -c   a        2   -        -   -                          ',\r\n        '     -         -       -        -   -                          ',\r\n        '------ b     b ---------        -   -                          ',\r\n        '-  d--         -                -   -                          ',\r\n        '- 2 ------ ----            ------   ---                        ',\r\n        '-   -   -   -              -         9-                        ',\r\n        '-- --   - 2 -              -  ---   ---                        ',\r\n        '-   -----   -              -  ---   -                          ',\r\n        '- 2 -   -   -              -  ---   -                          ',\r\n        '-     2 - 2 -              ------   -                          ',\r\n        '-   -   -   -                   -   -                          ',\r\n        '-   ------ -----                -- --                ----------',\r\n        '- 2 --         -          ------7   7-------         -    fddd-',\r\n        '-   -- 7     7 -          -7             7--         -       d-',\r\n        '-   --  2   2  -          -               ------------        -',\r\n        '-    -         -          -                -         -        -',\r\n        '-              -          -  6    6    6                      -',\r\n        '-    -         -          -                -         -        -',\r\n        '-   --  2   2  -          -               ----    ----  i  i  -',\r\n        '-   -- 7     7 -          -7             7-----  -   -        -',\r\n        '-   --         -          ------     ------   -  -   -        -',\r\n        '- 2 ------ -----               --- --         -  -   ---h--g---',\r\n        '-   -----   -                   -   -         -  -      -  -   ',\r\n        '-   -----   -                   - 2 -         -  -             ',\r\n        '-   -  e-   -                   -   -         -  -  - - - -    ',\r\n        '-       -   -                   -   -         -  --- - - - --  ',\r\n        '-   -   -   -                   -   -         -   -         -  ',\r\n        '- 2 -----   -                   - 2 -         -             -  ',\r\n        '-   -----   -------------       -   -         -   -        j-  ',\r\n        '-                -      ---     -   -         ------ - - - --  ',\r\n        '-     2       2           -     -   -               - - - -    ',\r\n        '-                -      ---     - 2 -                          ',\r\n        '------------------ ------       -   -                          ',\r\n        '          --  -     -      ------- -------                     ',\r\n        '         -    -  - -       -4   -   -    -                     ',\r\n        '          --     --        -      2   5  -                     ',\r\n        '            - ----         -    -   -    -                     ',\r\n        '            -  -           -    -   -    -                     ',\r\n        '            -  -           ------   ------                     ',\r\n        '            ----           -    -   -    -                     ',\r\n        '                           -   3  2     4-                     ',\r\n        '                           -    -   -    -                     ',\r\n        '                           ------   ------                     ',\r\n        '                           -             -                     ',\r\n        '                           -  2       2  -                     ',\r\n        '                           -             -                     ',\r\n        '                           ---------------                     '\r\n    ];\r\n\r\n    const objectSprites = {\r\n        '1': { sprite: 116, solid: true }, // Tree\r\n        '2': { sprite: 122 }, // Ceiling Light\r\n        '3': { sprite: 201 }, // Corpse\r\n        '4': { sprite: 127 }, // Bone pile\r\n        '5': { sprite: 117 }, // Skeleton flat\r\n        '6': { sprite: 112 }, // Chandeleir\r\n        '7': { sprite: 119, solid: true }, // Potted plant\r\n        '8': { sprite: 120, solid: true }, // Pot empty\r\n        '9': { sprite: 124, solid: true }, // Armour Knight\r\n        'a': { sprite: 110, solid: true }, // Dining table\r\n        'b': { sprite: 111, solid: true }, // Floor lamp\r\n        'c': { sprite: 147, solid: true }, // Floor flag\r\n        'd': { sprite: 143, solid: true }, // Wood barrel\r\n        'e': { sprite: 109, solid: true }, // Steel barrel\r\n        'f': { sprite: 108 }, // Water\r\n        'g': { sprite: 145, solid: true }, // Well empty\r\n        'h': { sprite: 144, solid: true }, // Well with water\r\n        'i': { sprite: 121, solid: true }, // Table\r\n        'j': { sprite: 131 }, // Basket\r\n    };\r\n\r\n    Object.keys(wallSprites).map(key => wallSprites[key]).forEach(x => x.sprite = getSpritesheetCoordinates(x.sprite));\r\n    Object.keys(wallSprites).map(key => wallSprites[key]).forEach(x => x.darkSprite = getSpritesheetCoordinates(x.darkSprite));\r\n    Object.keys(doorSprites).map(key => doorSprites[key]).forEach(x => x.sprite = getSpritesheetCoordinates(x.sprite));\r\n    Object.keys(doorSprites).map(key => doorSprites[key]).forEach(x => x.darkSprite = getSpritesheetCoordinates(x.darkSprite));\r\n    Object.keys(doorSprites).map(key => doorSprites[key]).forEach(x => x.frameSprite = getSpritesheetCoordinates(x.frameSprite));\r\n    Object.keys(doorSprites).map(key => doorSprites[key]).forEach(x => x.frameDarkSprite = getSpritesheetCoordinates(x.frameDarkSprite));\r\n    Object.keys(objectSprites).map(key => objectSprites[key]).forEach(x => x.sprite = getSpritesheetCoordinates(x.sprite));\r\n\r\n    return {\r\n        spawn: new Vector(29, 50).add(.5),\r\n\r\n        ceiling: '#383838',\r\n        floor: '#707070',\r\n\r\n        walls: walls.map(mapLiteralToSpriteObject(wallSprites, true)),\r\n        pushWalls: pushWalls.map(mapLiteralToSpriteObject(wallSprites, false)).map((row, y) => row.map((col, x) => {\r\n            if (col) {\r\n                col.action = 0;\r\n                col.position = 0;\r\n                col.dirX = 0;\r\n                col.dirY = 0;\r\n            }\r\n            return col;\r\n        })),\r\n        doors: doors.map(mapLiteralToSpriteObject(doorSprites, false)),\r\n        objects: objects.map(mapLiteralToSpriteObject(objectSprites, false, true)),\r\n\r\n        spriteUrl: 'sprites.png'\r\n    };\r\n}\r\n\r\nfunction mapLiteralToSpriteObject(spriteObjects, shared = false, coordinates = false) {\r\n\r\n    if (coordinates) {\r\n        return (row, y) => row.split('').map((col, x) => col === ' ' || col === '-' ? undefined : { ...spriteObjects[col], x: parseInt(x) + .5, y: y + .5 });\r\n    }\r\n\r\n    if (shared) {\r\n        return (y) => y.split('').map(x => x === ' ' || x === '-' ? undefined : spriteObjects[x]);\r\n    }\r\n\r\n    return (y) => y.split('').map(x => x === ' ' || x === '-' ? undefined : { ...spriteObjects[x] });\r\n}\r\n\r\nconst level_1_1 = createLevel();\r\n\r\nexport default level_1_1;","// https://stackoverflow.com/a/55644176\r\nconst fps = {\r\n    sampleSize: 60,\r\n    value: 0,\r\n    _sample_: [],\r\n    _index_: 0,\r\n    _lastTick_: false,\r\n    tick: function () {\r\n        // if is first tick, just set tick timestamp and return\r\n        if (!this._lastTick_) {\r\n            this._lastTick_ = performance.now();\r\n            return 0;\r\n        }\r\n        // calculate necessary values to obtain current tick FPS\r\n        let now = performance.now();\r\n        let delta = (now - this._lastTick_) / 1000;\r\n        let fps = 1 / delta;\r\n        // add to fps samples, current tick fps value \r\n        this._sample_[this._index_] = Math.round(fps);\r\n\r\n        // iterate samples to obtain the average\r\n        let average = 0;\r\n        for (let i = 0; i < this._sample_.length; i++) average += this._sample_[i];\r\n\r\n        average = Math.round(average / this._sample_.length);\r\n\r\n        // set new FPS\r\n        this.value = average;\r\n        // store current timestamp\r\n        this._lastTick_ = now;\r\n        // increase sample index counter, and reset it\r\n        // to 0 if exceded maximum sampleSize limit\r\n        this._index_++;\r\n        if (this._index_ === this.sampleSize) this._index_ = 0;\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport default fps;","export default class PerformanceCounter {\r\n\r\n    constructor(name, samples = 1000) {\r\n        this.name = name;\r\n        this.samples = samples;\r\n        this.min = 0;\r\n        this.max = 0;\r\n        this.history = [];\r\n    }\r\n\r\n    /**\r\n     * Draws a performance chart widget on the provided context.\r\n     * @param {CanvasRenderingContext2D} ctx \r\n     * @param {string} lineColor The chart line color.\r\n     * @param {string} textColor The text color;\r\n     * @param {number} x The x position of the widget.\r\n     * @param {number} y The y position of the widget.\r\n     * @param {number} width The width of the widget.\r\n     * @param {number} height The height of the widget.\r\n     */\r\n    draw(ctx, lineColor, textColor, x, y, width, height) {\r\n\r\n        const max = this.history.reduce((a, x) => Math.max(a, x), 0);\r\n        const min = this.history.reduce((a, x) => Math.min(a, x), max);\r\n        const diffY = max - min;\r\n        const mid = min + diffY / 2;\r\n        const avg = this.history.reduce((a, x) => a + x, 0) / this.history.length;\r\n\r\n        const padding = height * .10;\r\n\r\n        // Calculate the width of the left-side labels, then deduce that from the width of the graph.        \r\n        const axisLabelFontSize = height / 8;\r\n        const axisLabelTickWidth = axisLabelFontSize / 2;\r\n        const axisLabelWidth = axisLabelTickWidth * 3 + axisLabelFontSize * 4;\r\n\r\n        // The width of the graph is the total width of the widget minus the width of the axis labels.\r\n        const graphWidth = width - axisLabelWidth;\r\n\r\n        // Draw the axis labels.\r\n        const axisLabelYStep = height / 2;\r\n\r\n        ctx.font = `${axisLabelFontSize}px monospace`;\r\n        ctx.textAlign = 'right';\r\n        ctx.strokeStyle = textColor;\r\n\r\n        [max, mid, min].forEach((value, i) => {\r\n\r\n            const axisLabelTickX = x + graphWidth;\r\n            const axisLabelTickY = y + axisLabelYStep * i;\r\n            const axisLabelX = x + width;\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(axisLabelTickX, axisLabelTickY);\r\n            ctx.lineTo(axisLabelTickX + axisLabelTickWidth, axisLabelTickY);\r\n            ctx.stroke();\r\n\r\n            ctx.textBaseline = i === 0 ? 'top' : i === 1 ? 'middle' : 'bottom';\r\n\r\n            ctx.fillText(`${value.toFixed(2)} MS`, axisLabelX, axisLabelTickY);\r\n        });\r\n\r\n        // Draw the frame\r\n        ctx.fillStyle = '#00000099';\r\n        ctx.fillRect(x, y, graphWidth, height)\r\n\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeStyle = textColor;\r\n        ctx.strokeRect(x, y, graphWidth, height);\r\n\r\n        // Draw the Line Chart\r\n        const graphScaleX = (graphWidth - 2) / this.samples;\r\n        const graphHeight = height - 1;\r\n        const graphLeft = x + 1;\r\n        const graphBottom = y + graphHeight;\r\n\r\n        ctx.lineWidth = .5;\r\n        ctx.strokeStyle = lineColor;\r\n\r\n        ctx.moveTo(x + 1, y + height - 1);\r\n        ctx.beginPath();\r\n\r\n        for (let i = 0; i < this.history.length; i++) {\r\n            ctx.lineTo(graphLeft + graphScaleX * i, graphBottom - (this.history[i] - min) / diffY * graphHeight);\r\n        }\r\n\r\n        ctx.stroke();\r\n\r\n        // Draw the name\r\n        ctx.font = `${axisLabelFontSize}px monospace`;\r\n        ctx.textAlign = 'left';\r\n        ctx.textBaseline = 'top';\r\n\r\n        ctx.fillStyle = textColor;\r\n        ctx.fillText(this.name.toUpperCase() + ` (${avg.toFixed(2)} MS)`, x + padding, y + padding);\r\n    }\r\n\r\n    start() {\r\n        this.lastP = performance.now();\r\n    }\r\n\r\n    stop() {\r\n        const delta = performance.now() - this.lastP;\r\n\r\n        if (this.history.length === this.samples) {\r\n            this.history.pop();\r\n        }\r\n\r\n        this.history.unshift(delta);\r\n\r\n        this.min = this.history.length > 1 ? Math.min(this.min, delta) : delta;\r\n        this.max = Math.max(this.max, delta);\r\n    }\r\n}","import './styles.css';\r\nimport Vector from './vector';\r\nimport level_1_1 from './level-1-1'\r\nimport fps from './fps'\r\nimport PerformanceCounter from './performance-counter';\r\nimport { getSpritesheetCoordinates } from './sprites';\r\n\r\n// Constants\r\n//\r\n\r\nconst PI = Math.PI;\r\nconst DOUBLE_PI = PI * 2;\r\nconst HALF_PI = PI / 2;\r\nconst QUARTER_PI = PI / 4;\r\nconst DEG_TO_PI = PI / 180;\r\n\r\nconst SCREEN_SCALE = 2.25;\r\nconst SCREEN_WIDTH = 640 * SCREEN_SCALE;\r\nconst SCREEN_HEIGHT = 480 * SCREEN_SCALE;\r\nconst SCREEN_SAFEZONE = 10;\r\n\r\nconst GAME_WIDTH = 320;\r\nconst GAME_HEIGHT = 210;\r\n\r\nconst SCREEN_BACKGROUND = '#004241';\r\n\r\nconst FOV_DEG = 75;\r\nconst FOV = FOV_DEG * DEG_TO_PI;\r\nconst WALL_HEIGHT_RATIO = GAME_WIDTH / GAME_HEIGHT / FOV_DEG * 51;\r\nconst SPRITE_SIZE = 64;\r\n\r\nconst OSD_BACKGORUND = '#00000033';\r\nconst OSD_COLOR = '#fff';\r\nconst OSD_FONT = '12px monospace';\r\nconst OSD_HEIGHT = 20;\r\nconst OSD_MIDDLE = OSD_HEIGHT / 2;\r\n\r\nconst PLAYER_SIZE = 1 / 3;\r\n\r\nconst MOVE_SLOW = .04;\r\nconst MOVE_NORMAL = .06;\r\nconst MOVE_FAST = .10;\r\n\r\nconst TURN_RADIUS = DEG_TO_PI * 1.5;\r\n\r\nconst DIRECTION_NORTH = 0;\r\nconst DIRECTION_SOUTH = 1;\r\nconst DIRECTION_EAST = 2;\r\nconst DIRECTION_WEST = 3;\r\n\r\nconst DOOR_OPEN = 1;\r\nconst DOOR_CLOSED = 2;\r\nconst DOOR_OPENING = 3;\r\nconst DOOR_CLOSING = 4;\r\n\r\nconst DOOR_OPEN_TICKS = 2000;\r\n\r\nconst MINIMAP_ALPHA = .9;\r\nconst MINIMAP_CELLRADIUS = 12;\r\nconst MINIMAP_RAYS = false;\r\nconst MINIMAP_NONE = 0;\r\nconst MINIMAP_SMALL = 1;\r\nconst MINIMAP_LARGE = 2;\r\n\r\nconst PERFORMANCE_WIDTH = SCREEN_WIDTH / 3 * 2;\r\nconst PERFORMANCE_HEIGHT = 75;\r\nconst PERFORMANCE_X = SCREEN_WIDTH - PERFORMANCE_WIDTH - 10;\r\nconst PERFORMANCE_Y = SCREEN_HEIGHT - (PERFORMANCE_HEIGHT + 5) * 2 - 10;\r\n\r\nconst WEAPONS = [{\r\n    isFiring: false,\r\n    position: 0,\r\n    sprite: [522, 523, 524, 525, 526].map(x => getSpritesheetCoordinates(x)),\r\n}, {\r\n    isFiring: false,\r\n    position: 0,\r\n    sprite: [527, 528, 529, 530, 531].map(x => getSpritesheetCoordinates(x)),\r\n}, {\r\n    isFiring: false,\r\n    position: 0,\r\n    sprite: [532, 533, 534, 535, 536].map(x => getSpritesheetCoordinates(x)),\r\n}, {\r\n    isFiring: false,\r\n    position: 0,\r\n    sprite: [537, 538, 539, 540, 541].map(x => getSpritesheetCoordinates(x)),\r\n}]\r\n\r\nconst PLAYER_DEFAULT = {\r\n    angle: 0,\r\n    speed: 0,\r\n    side: 0,\r\n    weapon: WEAPONS[0]\r\n};\r\n\r\n// Settings\r\n//\r\n\r\nlet SHOW_DEBUG = JSON.parse(localStorage.getItem('SHOW_FPS')) ?? true;\r\nlet SHOW_GRAPHS = JSON.parse(localStorage.getItem('SHOW_GRAPHS')) ?? true;\r\nlet RENDER_SPRITES = JSON.parse(localStorage.getItem('RENDER_SPRITES')) ?? true;\r\nlet RENDER_INTERLACED = JSON.parse(localStorage.getItem('RENDER_INTERLACED')) ?? true;\r\nlet WALL_COLLISION = JSON.parse(localStorage.getItem('WALL_COLLISION')) ?? true;\r\nlet GAME_DISPLAY = JSON.parse(localStorage.getItem('GAME_DISPLAY')) ?? 1;\r\n\r\n// State Save\r\n//\r\n\r\nwindow.addEventListener('unload', (e) => {\r\n\r\n    localStorage.setItem('player', JSON.stringify(player));\r\n\r\n    localStorage.setItem('SHOW_DEBUG', JSON.stringify(SHOW_DEBUG));\r\n    localStorage.setItem('SHOW_GRAPHS', JSON.stringify(SHOW_GRAPHS));\r\n\r\n    localStorage.setItem('RENDER_INTERLACED', JSON.stringify(RENDER_INTERLACED));\r\n    localStorage.setItem('RENDER_SPRITES', JSON.stringify(RENDER_SPRITES));\r\n\r\n    localStorage.setItem('GAME_DISPLAY', JSON.stringify(GAME_DISPLAY));\r\n});\r\n\r\n// Level / Map / Doors / Objects\r\n//\r\n\r\nconst LEVEL = level_1_1;\r\n\r\nconst WALLS = LEVEL.walls;\r\nconst PUSHWALLS = LEVEL.pushWalls;\r\nconst DOORS = LEVEL.doors;\r\nconst OBJECTS = LEVEL.objects;\r\n\r\nconst VISIBILITY = WALLS.map(row => row.map(col => 0));\r\n\r\n// Spritesheet\r\n//\r\n\r\nconst spritesheet = new Image();\r\nspritesheet.src = LEVEL.spriteUrl;\r\n// Start the game once the image has loaded.\r\nspritesheet.onload = () => startGame();\r\n\r\n// Canvas\r\n//\r\n\r\n/**\r\n * @type HTMLCanvasElement\r\n */\r\nvar canvas = document.getElementById('canvas');\r\ncanvas.width = SCREEN_WIDTH;\r\ncanvas.height = SCREEN_HEIGHT;\r\n\r\nvar ctx = canvas.getContext('2d');\r\nctx.imageSmoothingEnabled = false;\r\n\r\n// Messages\r\n//\r\n\r\nlet messageText = null;\r\nlet messageTextTimeoutId;\r\n\r\nfunction setMessageText(messageOrSettingName, settingValue) {\r\n\r\n    if (typeof settingValue === 'undefined') {\r\n        messageText = messageOrSettingName;\r\n    } else {\r\n        messageText = `${messageOrSettingName} ${settingValue ? 'ON' : 'OFF'}`;\r\n    }\r\n\r\n    if (messageTextTimeoutId) {\r\n        clearTimeout(messageTextTimeoutId);\r\n    }\r\n\r\n    messageTextTimeoutId = setTimeout(() => messageText = null, 1500);\r\n}\r\n\r\n// Keyboard\r\n//\r\n\r\nconst controls = {\r\n    up: false,\r\n    down: false,\r\n    left: false,\r\n    right: false,\r\n    turbo: false,\r\n    stealth: false,\r\n    strafe: false,\r\n    fire: false,\r\n    map: MINIMAP_SMALL,\r\n    action: false,\r\n    pause: false\r\n};\r\n\r\nconst keyboardToControlMap = {\r\n    KeyW: 'up',\r\n    KeyA: 'left',\r\n    KeyS: 'down',\r\n    KeyD: 'right',\r\n    KeyZ: 'strafe',\r\n    KeyX: 'fire',\r\n    ArrowUp: 'up',\r\n    ArrowLeft: 'left',\r\n    ArrowDown: 'down',\r\n    ArrowRight: 'right',\r\n    ShiftLeft: 'turbo',\r\n    Space: 'action'\r\n};\r\n\r\nconst keyboardToControlToggleMap = {\r\n    Escape: 'pause'\r\n};\r\n\r\nconst keyboardToFunctionMap = {\r\n    // Toggle Weapon 1\r\n    Digit1: () => player.weapon = WEAPONS[0],\r\n    Digit2: () => player.weapon = WEAPONS[1],\r\n    Digit3: () => player.weapon = WEAPONS[2],\r\n    Digit4: () => player.weapon = WEAPONS[3],\r\n    Digit5: () => player.weapon = null,\r\n    // Toggle Mini-Map\r\n    KeyM: () => {\r\n        switch (controls.map) {\r\n            case MINIMAP_NONE:\r\n                controls.map = MINIMAP_SMALL;\r\n                break;\r\n            case MINIMAP_SMALL:\r\n                controls.map = MINIMAP_LARGE;\r\n                break;\r\n            case MINIMAP_LARGE:\r\n                controls.map = MINIMAP_SMALL; // Never toggle to NONE for now\r\n                break;\r\n        }\r\n    },\r\n    // Toggle Debug\r\n    KeyU: () => SHOW_DEBUG = !SHOW_DEBUG,\r\n    // Toggle Performance Graphs\r\n    KeyG: () => SHOW_GRAPHS = !SHOW_GRAPHS,\r\n    // Toggle Interlacing\r\n    KeyI: () => setMessageText('INTERLACING', RENDER_INTERLACED = !RENDER_INTERLACED),\r\n    // Toggle Sprites\r\n    KeyO: () => setMessageText('SPRITES', RENDER_SPRITES = !RENDER_SPRITES),\r\n    // Toggle Wall Collision\r\n    BracketLeft: () => setMessageText('WALL COLLISION', WALL_COLLISION = !WALL_COLLISION),\r\n    // Toggle Smoothing\r\n    KeyP: () => setMessageText('SMOOTHING', ctx.imageSmoothingEnabled = !ctx.imageSmoothingEnabled),\r\n    // Reset\r\n    KeyR: () => (setMessageText('PLAYER RESET'), player = { ...PLAYER_DEFAULT, x: LEVEL.spawn.x, y: LEVEL.spawn.y }, floodFillMinimap(Math.floor(player.x), Math.floor(player.y))),\r\n    // Zoom In\r\n    NumpadAdd: () => GAME_DISPLAY = Math.min(GAME_DISPLAY + 1, 3),\r\n    // Zoom Out\r\n    NumpadSubtract: () => GAME_DISPLAY = Math.max(GAME_DISPLAY - 1, 1)\r\n}\r\n\r\ndocument.addEventListener('keydown', (e) => {\r\n\r\n    // Set false on controls\r\n    if (e.code in keyboardToControlMap) {\r\n        controls[keyboardToControlMap[e.code]] = true;\r\n    }\r\n});\r\n\r\ndocument.addEventListener('keyup', (e) => {\r\n\r\n    console.log(e.code);\r\n\r\n    // Set false on controls\r\n    if (e.code in keyboardToControlMap) {\r\n        controls[keyboardToControlMap[e.code]] = false;\r\n    }\r\n\r\n    // Toggle boolean on controls\r\n    if (e.code in keyboardToControlToggleMap) {\r\n        controls[keyboardToControlToggleMap[e.code]] = !controls[keyboardToControlToggleMap[e.code]];\r\n    }\r\n\r\n    // Trigger function\r\n    if (e.code in keyboardToFunctionMap) {\r\n        keyboardToFunctionMap[e.code]();\r\n    }\r\n});\r\n\r\n// Player\r\n//\r\nlet player = JSON.parse(localStorage.getItem('player')) ?? { ...PLAYER_DEFAULT, x: LEVEL.spawn.x, y: LEVEL.spawn.y };\r\n\r\n// Game Loop\r\n//\r\n\r\nfunction startGame() {\r\n\r\n    // If player is in door way, make door open.\r\n    const mapY = Math.floor(player.y),\r\n        mapX = Math.floor(player.x);\r\n\r\n    const door = DOORS[mapY][mapX];\r\n\r\n    if (door) {\r\n        door.action = DOOR_OPEN;\r\n        door.position = 1;\r\n    }\r\n\r\n    // Fill the minimap\r\n    floodFillMinimap(mapX, mapY);\r\n\r\n    // Start the game loop\r\n    requestAnimationFrame(loop);\r\n}\r\n\r\n/**\r\n * Increases on each frame, used to render with interlaced vertical lines.\r\n */\r\nlet frameCounter = 0;\r\nlet lastPerf = performance.now();\r\n\r\nconst calcPerf = new PerformanceCounter('Calculations');\r\nconst drawPerf = new PerformanceCounter('Drawing');\r\n\r\nfunction loop() {\r\n\r\n    const now = performance.now();\r\n    const delta = now - lastPerf;\r\n\r\n    lastPerf = now;\r\n    frameCounter++;\r\n\r\n    try {\r\n\r\n        if (!controls.pause) {\r\n\r\n            const gx = SCREEN_WIDTH / 2 - GAME_WIDTH * GAME_DISPLAY / 2;\r\n            const gy = (SCREEN_HEIGHT - 200) / 2 - GAME_HEIGHT * GAME_DISPLAY / 2;\r\n            const gw = GAME_WIDTH * GAME_DISPLAY;\r\n            const gh = GAME_HEIGHT * GAME_DISPLAY;\r\n\r\n            let rays;\r\n\r\n            // Calculations\r\n            // ------------------------------\r\n            calcPerf.start();\r\n\r\n            update(delta);\r\n            rays = getRays(player, gw);\r\n\r\n            calcPerf.stop();\r\n\r\n            // Render\r\n            // ------------------------------\r\n            drawPerf.start();\r\n\r\n            render(rays.rays, rays.visibleCells, gx, gy, gw, gh);\r\n\r\n            drawPerf.stop();\r\n\r\n            // Render Performance Chart\r\n            // ------------------------------\r\n            if (SHOW_GRAPHS) {\r\n                calcPerf.draw(ctx, 'blue', 'white', PERFORMANCE_X, PERFORMANCE_Y, PERFORMANCE_WIDTH, PERFORMANCE_HEIGHT);\r\n                drawPerf.draw(ctx, 'red', 'white', PERFORMANCE_X, PERFORMANCE_Y + PERFORMANCE_HEIGHT + SCREEN_SAFEZONE, PERFORMANCE_WIDTH, PERFORMANCE_HEIGHT);\r\n            }\r\n        }\r\n\r\n        requestAnimationFrame(loop);\r\n\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction update(delta) {\r\n\r\n    movePlayer(delta);\r\n    moveDoors(delta);\r\n    movePushWalls(delta);\r\n}\r\n\r\nfunction render(rays, visibleCells, x, y, w, h) {\r\n\r\n    // Because interlaced rendering of game requires that we don't clear,\r\n    // we clear and fill around the game rect.\r\n\r\n    ctx.fillStyle = SCREEN_BACKGROUND;\r\n\r\n    if (RENDER_INTERLACED || frameCounter > 0) {\r\n        clearAround(ctx, x, y, w, h);\r\n        fillRectAround(ctx, x, y, w, h);\r\n    } else {\r\n        ctx.clearRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\r\n        ctx.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\r\n\r\n        ctx.fillStyle = 'black';\r\n        ctx.fillRect(x, y, w, h);\r\n    }\r\n\r\n    // Draw game border\r\n    drawInset(ctx, x, y, w, h, 2, '#05716e', '#000000');\r\n\r\n    // Add clipping to prevent the game from rendering outside it's \r\n    // display area.\r\n\r\n    ctx.save();\r\n    ctx.beginPath();\r\n    ctx.rect(x, y, w, h);\r\n    ctx.clip();\r\n\r\n    // Render the game screen.\r\n    renderScene(ctx, rays, x, y, w, h);\r\n    renderObjects(ctx, rays, visibleCells, OBJECTS, x, y, w, h);\r\n    renderPlayer(ctx, player, x, y, w, h);\r\n\r\n    // Restore to stop clipping.\r\n    ctx.restore();\r\n\r\n    if (controls.map > MINIMAP_NONE) {\r\n        renderMap(ctx, WALLS, rays, controls.map === MINIMAP_LARGE);\r\n    }\r\n\r\n    if (SHOW_DEBUG || messageText) {\r\n\r\n        renderOsd(ctx);\r\n\r\n        if (SHOW_DEBUG) {\r\n            renderCoordinates(ctx);\r\n            renderFps(ctx, fps.tick());\r\n        }\r\n\r\n        if (messageText) {\r\n            renderMessage(ctx, messageText);\r\n        }\r\n    }\r\n}\r\n\r\nfunction floodFillMinimap(x, y) {\r\n\r\n    if (y < 0 || y >= WALLS.length || x < 0 || x >= WALLS[y].length) {\r\n        return;\r\n    }\r\n\r\n    if (VISIBILITY[y][x] > 0) {\r\n        return;\r\n    }\r\n\r\n    VISIBILITY[y][x] = 1;\r\n\r\n    // Stop at walls/doors/push walls\r\n    if (WALLS[y][x] || DOORS[y][x] || PUSHWALLS[y][x]) {\r\n\r\n        // Fill Wall Corners\r\n\r\n        // Top Right\r\n        if (WALLS[y][x] && !isOutOfBounds(x + 1, y + 1, WALLS[0].length, WALLS.length) && WALLS[y + 1][x + 1] && WALLS[y][x + 1]) VISIBILITY[y][x + 1] = 1;\r\n        // Right Top\r\n        if (WALLS[y][x] && !isOutOfBounds(x - 1, y - 1, WALLS[0].length, WALLS.length) && WALLS[y - 1][x - 1] && WALLS[y - 1][x]) VISIBILITY[y - 1][x] = 1;\r\n        // Right Bottom\r\n        if (WALLS[y][x] && !isOutOfBounds(x - 1, y + 1, WALLS[0].length, WALLS.length) && WALLS[y + 1][x - 1] && WALLS[y + 1][x]) VISIBILITY[y + 1][x] = 1;\r\n        // Bottom Right\r\n        if (WALLS[y][x] && !isOutOfBounds(x + 1, y - 1, WALLS[0].length, WALLS.length) && WALLS[y - 1][x + 1] && WALLS[y][x + 1]) VISIBILITY[y][x + 1] = 1;\r\n        // Bottom Left\r\n        if (WALLS[y][x] && !isOutOfBounds(x - 1, y - 1, WALLS[0].length, WALLS.length) && WALLS[y - 1][x - 1] && WALLS[y][x - 1]) VISIBILITY[y][x - 1] = 1;\r\n        // Left Top\r\n        if (WALLS[y][x] && !isOutOfBounds(x + 1, y - 1, WALLS[0].length, WALLS.length) && WALLS[y - 1][x + 1] && WALLS[y - 1][x]) VISIBILITY[y - 1][x] = 1;\r\n        // Top Left\r\n        if (WALLS[y][x] && !isOutOfBounds(x - 1, y + 1, WALLS[0].length, WALLS.length) && WALLS[y + 1][x - 1] && WALLS[y][x - 1]) VISIBILITY[y][x - 1] = 1;\r\n\r\n        return;\r\n    }\r\n\r\n    floodFillMinimap(x - 1, y);\r\n    floodFillMinimap(x + 1, y);\r\n    floodFillMinimap(x, y - 1);\r\n    floodFillMinimap(x, y + 1);\r\n}\r\n\r\n/**\r\n * Keeps the angle between -Math.PI and Math.PI. Required to be able to compare angles.\r\n * @param {number} angle \r\n */\r\nfunction fixAngle(angle) {\r\n\r\n    if (angle < -PI) {\r\n        return angle + DOUBLE_PI;\r\n    }\r\n\r\n    if (angle > PI) {\r\n        return angle - DOUBLE_PI;\r\n    }\r\n\r\n    return angle;\r\n}\r\n\r\n\r\nfunction getDirection(angle) {\r\n    angle = angle + QUARTER_PI;\r\n\r\n    while (angle < 0) {\r\n        angle += DOUBLE_PI;\r\n    }\r\n\r\n    while (angle > DOUBLE_PI) {\r\n        angle -= DOUBLE_PI;\r\n    }\r\n\r\n    if (angle > 3 * HALF_PI) {\r\n        return DIRECTION_NORTH;\r\n    } else if (angle > PI) {\r\n        return DIRECTION_WEST;\r\n    } else if (angle > HALF_PI) {\r\n        return DIRECTION_SOUTH;\r\n    } else {\r\n        return DIRECTION_EAST;\r\n    }\r\n}\r\n\r\n/**\r\n * Corrects the provided distance to compensate for fish-eye effect.\r\n * @param {number} distance The ray distance.\r\n * @param {number} viewAngle The ray angle.\r\n * @param {number} playerAngle The player angle.\r\n */\r\nfunction getViewCorrectedDistance(distance, viewAngle, playerAngle) {\r\n\r\n    const difference = viewAngle - playerAngle;\r\n    return distance * Math.cos(difference);\r\n}\r\n\r\nfunction isOutOfBounds(sx, sy, dw, dh) {\r\n\r\n    return sx < 0 || sx >= dw || sy < 0 || sy >= dh;\r\n}\r\n\r\nfunction getHorizontalCollision(angle, player) {\r\n\r\n    const up = Math.abs(Math.floor(angle / PI) % 2) > 0;\r\n\r\n    const mapY = up ? Math.floor(player.y) : Math.floor(player.y) + 1;\r\n    const mapX = player.x + (mapY - player.y) / Math.tan(angle);\r\n\r\n    const stepY = up ? -1 : 1;\r\n    const stepX = stepY / Math.tan(angle);\r\n\r\n    const halfStepX = stepX / 2;\r\n    const halfStepY = halfStepX * Math.tan(angle);\r\n\r\n    let wall;\r\n    let pushWall;\r\n    let door;\r\n\r\n    let nextX = mapX;\r\n    let nextY = mapY;\r\n\r\n    let color;\r\n    let sprite;\r\n    let spriteOffsetX = 0;\r\n\r\n    const cells = [];\r\n\r\n    while (true) {\r\n\r\n        const cellX = Math.floor(nextX);\r\n        const cellY = up ? Math.floor(nextY) - 1 : Math.floor(nextY);\r\n\r\n        if (isOutOfBounds(cellX, cellY, WALLS[0].length, WALLS.length)) {\r\n            break;\r\n        }\r\n\r\n        wall = WALLS[cellY][cellX];\r\n\r\n        if (wall) {\r\n            // If cell is adjacent to door, we render door frame\r\n            let adjacentDoor = up ? DOORS[cellY + 1][cellX] : DOORS[cellY - 1][cellX];\r\n\r\n            if (adjacentDoor) {\r\n                color = adjacentDoor.frameColor;\r\n                sprite = adjacentDoor.frameSprite;\r\n            } else {\r\n                color = wall.color;\r\n                sprite = wall.sprite;\r\n            }\r\n\r\n            break;\r\n        }\r\n\r\n        pushWall = PUSHWALLS[cellY][cellX];\r\n\r\n        if (pushWall) {\r\n\r\n            const pushWallY = Math.abs(stepY) * pushWall.position * pushWall.dirY;\r\n            const pushWallX = pushWallY / Math.tan(angle);\r\n\r\n            if (pushWall.action === 0 || Math.floor(nextX + pushWallX) === cellX) {\r\n                color = pushWall.color;\r\n                sprite = pushWall.sprite;\r\n\r\n                nextX += pushWallX;\r\n                nextY += pushWallY;\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        door = DOORS[cellY][cellX];\r\n\r\n        // Special logic for the doors, they are inset by half step and can be opening/closing.\r\n        if (door && door.action !== DOOR_OPEN) {\r\n\r\n            // If door is opening or closing, we check if we hit it.\r\n            if (door.action === DOOR_CLOSED || nextX + halfStepX - Math.floor(nextX + halfStepX) > door.position) {\r\n\r\n                color = door.color;\r\n                sprite = door.sprite;\r\n                spriteOffsetX = -door.position;\r\n\r\n                nextX += halfStepX;\r\n                nextY += halfStepY;\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        cells.push([cellX, cellY]);\r\n\r\n        nextX += stepX;\r\n        nextY += stepY;\r\n    }\r\n\r\n    return {\r\n        angle,\r\n        distance: Vector.distance(player.x, player.y, nextX, nextY),\r\n        color: color,\r\n        sprite: sprite,\r\n        spriteX: up || door ? (spriteOffsetX + nextX - Math.floor(nextX)) * SPRITE_SIZE : (1 - spriteOffsetX + Math.floor(nextX) - nextX) * SPRITE_SIZE,\r\n        vertical: false,\r\n        cells: cells\r\n    };\r\n}\r\n\r\nfunction getVerticalCollision(angle, player) {\r\n\r\n    const right = Math.abs(Math.floor((angle - HALF_PI) / PI) % 2) > 0;\r\n\r\n    const mapX = right ? Math.floor(player.x) + 1 : Math.floor(player.x);\r\n    const mapY = player.y + (mapX - player.x) * Math.tan(angle);\r\n\r\n    const stepX = right ? 1 : -1;\r\n    const stepY = stepX * Math.tan(angle);\r\n\r\n    const halfStepX = stepX / 2;\r\n    const halfStepY = halfStepX * Math.tan(angle);\r\n\r\n    let wall;\r\n    let pushWall;\r\n    let door;\r\n\r\n    let nextX = mapX;\r\n    let nextY = mapY;\r\n\r\n    let color;\r\n    let sprite;\r\n    let spriteOffsetX = 0;\r\n\r\n    const cells = [];\r\n\r\n    while (true) {\r\n\r\n        const cellX = right ? Math.floor(nextX) : Math.floor(nextX) - 1;;\r\n        const cellY = Math.floor(nextY);\r\n\r\n        if (isOutOfBounds(cellX, cellY, WALLS[0].length, WALLS.length)) {\r\n            break;\r\n        }\r\n\r\n        wall = WALLS[cellY][cellX];\r\n\r\n        if (wall) {\r\n            // If cell is adjacent to door, we render door frame\r\n            let adjacentDoor = right ? DOORS[cellY][cellX - 1] : DOORS[cellY][cellX + 1];\r\n\r\n            if (adjacentDoor) {\r\n                color = adjacentDoor.frameDarkColor;\r\n                sprite = adjacentDoor.frameDarkSprite;\r\n            } else {\r\n                color = wall.darkColor;\r\n                sprite = wall.darkSprite;\r\n            }\r\n\r\n            break;\r\n        }\r\n\r\n        pushWall = PUSHWALLS[cellY][cellX];\r\n\r\n        if (pushWall) {\r\n\r\n            const pushWallX = Math.abs(stepX) * pushWall.position * pushWall.dirX;\r\n            const pushWallY = pushWallX * Math.tan(angle);\r\n\r\n            if (pushWall.action === 0 || Math.floor(nextY + pushWallY) === cellY) {\r\n                color = pushWall.darkColor;\r\n                sprite = pushWall.darkSprite;\r\n\r\n                nextX += pushWallX;\r\n                nextY += pushWallY;\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        door = DOORS[cellY][cellX];\r\n\r\n        // Special logic for the doors, they are inset by half step and can be opening/closing.\r\n        if (door && door.action !== DOOR_OPEN) {\r\n\r\n            // If door is opening or closing, we check if we hit it.\r\n            if (door.action === DOOR_CLOSED || nextY + halfStepY - Math.floor(nextY + halfStepY) > door.position) {\r\n\r\n                color = door.darkColor;\r\n                sprite = door.darkSprite;\r\n                spriteOffsetX = -door.position;\r\n\r\n                nextX += halfStepX;\r\n                nextY += halfStepY;\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        cells.push([cellX, cellY]);\r\n\r\n        nextX += stepX;\r\n        nextY += stepY;\r\n    }\r\n\r\n    return {\r\n        angle,\r\n        distance: Vector.distance(player.x, player.y, nextX, nextY),\r\n        color: color,\r\n        sprite: sprite,\r\n        spriteX: right || door ? (spriteOffsetX + nextY - Math.floor(nextY)) * SPRITE_SIZE : (1 - spriteOffsetX + Math.floor(nextY) - nextY) * SPRITE_SIZE,\r\n        vertical: true,\r\n        cells: cells\r\n    };\r\n}\r\n\r\nfunction getRays(player, w) {\r\n\r\n    const start = player.angle - FOV / 2;\r\n    const step = FOV / w;\r\n    const rays = [];\r\n    const visibleCells = [];\r\n\r\n    for (let y = 0; y < WALLS.length; y++) {\r\n        visibleCells[y] = [];\r\n        for (let x = 0; x < WALLS[y].length; x++) {\r\n            visibleCells[y][x] = 0;\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < w; i++) {\r\n\r\n        const angle = start + step * i;\r\n        const hCollision = getHorizontalCollision(angle, player);\r\n        const vCollision = getVerticalCollision(angle, player);\r\n\r\n        const collision = hCollision.distance > vCollision.distance ? vCollision : hCollision;\r\n\r\n        collision.cells.forEach(([x, y]) => {\r\n            visibleCells[y][x] = true;\r\n        });\r\n\r\n        rays.push(collision);\r\n    }\r\n\r\n    return {\r\n        rays,\r\n        visibleCells\r\n    };\r\n}\r\n\r\nfunction movePlayer(delta) {\r\n\r\n    // At 100 fps, delta is 10.\r\n    const timeScale = delta / 1000 * 100;\r\n\r\n    // Speed\r\n\r\n    if (controls.up) {\r\n        if (controls.turbo) {\r\n            player.speed = MOVE_FAST * timeScale;\r\n        } else {\r\n            player.speed = MOVE_NORMAL * timeScale;\r\n        }\r\n    }\r\n\r\n    if (controls.down) {\r\n        player.speed = -MOVE_SLOW * timeScale;\r\n    }\r\n\r\n    if (!controls.up && !controls.down) {\r\n        player.speed = 0;\r\n    }\r\n\r\n    // Strafe\r\n\r\n    if (controls.strafe) {\r\n        if (controls.left) {\r\n            player.side = MOVE_SLOW * timeScale;\r\n        }\r\n\r\n        if (controls.right) {\r\n            player.side = -MOVE_SLOW * timeScale;\r\n        }\r\n\r\n        if (!controls.left && !controls.right) {\r\n            player.side = 0;\r\n        }\r\n    } else {\r\n        player.side = 0;\r\n    }\r\n\r\n    // Turning\r\n\r\n    if (!controls.strafe) {\r\n        if (controls.left) {\r\n            player.angle = fixAngle(player.angle - TURN_RADIUS * timeScale);\r\n        }\r\n        if (controls.right) {\r\n            player.angle = fixAngle(player.angle + TURN_RADIUS * timeScale);\r\n        }\r\n    }\r\n\r\n    // Fire Weapon\r\n\r\n    if (controls.fire && player.weapon?.isFiring === false) {\r\n        player.weapon.isFiring = true;\r\n        player.weapon.position = 0;\r\n    }\r\n\r\n    // Action / Open Doors\r\n\r\n    if (controls.action) {\r\n\r\n        let actionX = Math.floor(player.x + Math.cos(player.angle));\r\n        let actionY = Math.floor(player.y + Math.sin(player.angle));\r\n\r\n        // Check if there's a door to action\r\n        let door = DOORS[actionY][actionX];\r\n\r\n        if (door) {\r\n            switch (door.action) {\r\n                case DOOR_CLOSED:\r\n                case DOOR_CLOSING:\r\n                    door.action = DOOR_OPENING;\r\n                    break;\r\n                case DOOR_OPEN:\r\n                case DOOR_OPENING:\r\n                    door.action = DOOR_CLOSING;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Check if there's a push wall to action\r\n        let pushWall = PUSHWALLS[actionY][actionX];\r\n\r\n        if (pushWall && pushWall.action === 0) {\r\n            const direction = getDirection(player.angle);\r\n            let dy = 0, dx = 0;\r\n\r\n            switch (direction) {\r\n                case DIRECTION_NORTH:\r\n                    dy = -1;\r\n                    break;\r\n                case DIRECTION_SOUTH:\r\n                    dy = 1;\r\n                    break;\r\n                case DIRECTION_EAST:\r\n                    dx = 1;\r\n                    break;\r\n                case DIRECTION_WEST:\r\n                    dx = -1;\r\n                    break;\r\n            }\r\n\r\n            // Check for things blocking\r\n            if (!WALLS[actionY + dy][actionX + dx]) {\r\n                pushWall.dirX = dx;\r\n                pushWall.dirY = dy;\r\n                pushWall.position = 0;\r\n                pushWall.action = 1;\r\n            }\r\n        }\r\n\r\n        // Check if there's a wall to action\r\n        let wall = WALLS[actionY][actionX];\r\n\r\n        if (wall && wall.next) {\r\n            WALLS[actionY][actionX] = wall.next;\r\n        }\r\n\r\n        controls.action = false;\r\n    }\r\n\r\n    // Fire Weapon\r\n\r\n    if (player.weapon?.isFiring) {\r\n        player.weapon.position += delta / 400;\r\n\r\n        if (player.weapon.position >= 1) {\r\n            player.weapon.isFiring = false;\r\n            player.weapon.position = 0;\r\n        }\r\n    }\r\n\r\n    // Move the Player\r\n\r\n    let moveX = 0;\r\n    let moveY = 0;\r\n\r\n    if (player.speed !== 0) {\r\n        moveX += Math.cos(player.angle) * player.speed;\r\n        moveY += Math.sin(player.angle) * player.speed;\r\n    }\r\n\r\n    if (player.side !== 0) {\r\n        moveX += Math.sin(player.angle) * player.side;\r\n        moveY -= Math.cos(player.angle) * player.side;\r\n    }\r\n\r\n    if (moveX === 0 && moveY === 0) {\r\n        return;\r\n    }\r\n\r\n    if (tryMovePlayer(player.x + moveX, player.y + moveY)) {\r\n        player.x += moveX;\r\n        player.y += moveY;\r\n        return;\r\n    }\r\n\r\n    if (moveX && tryMovePlayer(player.x + moveX, player.y)) {\r\n        player.x += moveX;\r\n        return;\r\n    }\r\n\r\n    if (moveY && tryMovePlayer(player.x, player.y + moveY)) {\r\n        player.y += moveY;\r\n        return;\r\n    }\r\n}\r\n\r\nfunction moveDoors(delta) {\r\n\r\n    for (let y = 0; y < DOORS.length; y++) {\r\n        for (let x = 0; x < DOORS[y].length; x++) {\r\n\r\n            const door = DOORS[y][x];\r\n\r\n            if (!door) {\r\n                continue;\r\n            }\r\n\r\n            switch (door.action) {\r\n                case DOOR_OPEN:\r\n                    if (Math.floor(player.x) === x && Math.floor(player.y) === y) {\r\n                        door.ticks = 0;\r\n                    } else {\r\n                        door.ticks += delta;\r\n                    }\r\n\r\n                    if (door.ticks >= DOOR_OPEN_TICKS) {\r\n                        door.action = DOOR_CLOSING;\r\n                    }\r\n\r\n                    break;\r\n                case DOOR_OPENING:\r\n                    door.position += delta / 1000;\r\n\r\n                    if (door.position >= 1) {\r\n                        door.position = 1;\r\n                        door.ticks = 0;\r\n                        door.action = DOOR_OPEN;\r\n\r\n                        const dirY = y - Math.floor(player.y);\r\n                        const dirX = x - Math.floor(player.x);\r\n                        floodFillMinimap(x + dirX, y + dirY);\r\n                    }\r\n\r\n                    break;\r\n                case DOOR_CLOSING:\r\n                    door.position -= delta / 1000;\r\n\r\n                    if (door.position <= 0) {\r\n                        door.position = 0;\r\n                        door.action = DOOR_CLOSED;\r\n                    }\r\n\r\n                    break;\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\nfunction movePushWalls(delta) {\r\n\r\n    for (let y = 0; y < PUSHWALLS.length; y++) {\r\n        for (let x = 0; x < PUSHWALLS[y].length; x++) {\r\n\r\n            const pushWall = PUSHWALLS[y][x];\r\n\r\n            if (!pushWall || !pushWall.action) {\r\n                continue;\r\n            }\r\n\r\n            if (pushWall.action > 0) {\r\n                pushWall.position += delta / 1000;\r\n\r\n                if (pushWall.position >= 1) {\r\n                    pushWall.action = 0;\r\n                    pushWall.position = 0;\r\n\r\n                    // Move the wall on the map\r\n                    PUSHWALLS[y][x] = undefined;\r\n                    PUSHWALLS[y + pushWall.dirY][x + pushWall.dirX] = pushWall;\r\n\r\n                    // If the next tile isn't a wall, we'll continue moving the push wall.\r\n                    if (!WALLS[y + pushWall.dirY * 2][x + pushWall.dirX * 2] && !PUSHWALLS[y + pushWall.dirY * 2][x + pushWall.dirX * 2]) {\r\n                        pushWall.action = 1;\r\n                    } else {\r\n                        floodFillMinimap(x, y);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction tryMovePlayer(x, y) {\r\n\r\n    if (!WALL_COLLISION) {\r\n        return true;\r\n    }\r\n\r\n    var xl = Math.floor(x - PLAYER_SIZE);\r\n    var yl = Math.floor(y - PLAYER_SIZE);\r\n    var xh = Math.floor(x + PLAYER_SIZE);\r\n    var yh = Math.floor(y + PLAYER_SIZE);\r\n\r\n    for (let dy = yl; dy <= yh; dy++) {\r\n        for (let dx = xl; dx <= xh; dx++) {\r\n            if (WALLS[dy][dx]) {\r\n                return false;\r\n            }\r\n            if (PUSHWALLS[dy][dx]) {\r\n                return false;\r\n            }\r\n            if (DOORS[dy][dx] && DOORS[dy][dx].action !== DOOR_OPEN) {\r\n                return false;\r\n            }\r\n            if (OBJECTS[dy][dx] && OBJECTS[dy][dx].solid) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * \r\n * @param {CanvasRenderingContext2D} ctx \r\n * @param {*} rays \r\n * @param {*} dx \r\n * @param {*} dy \r\n * @param {*} dw \r\n * @param {*} dh \r\n */\r\nfunction renderScene(ctx, rays, dx, dy, dw, dh) {\r\n\r\n    let x = RENDER_INTERLACED && frameCounter % 2 === 0 ? 1 : 0;\r\n    let increment = RENDER_INTERLACED ? 2 : 1;\r\n\r\n    for (; x < rays.length; x += increment) {\r\n\r\n        const ray = rays[x];\r\n\r\n        const distance = getViewCorrectedDistance(ray.distance, ray.angle, player.angle);\r\n        const height = dh / distance * WALL_HEIGHT_RATIO;\r\n        const y = dh / 2 - height / 2;\r\n\r\n        // Ceiling\r\n        ctx.fillStyle = LEVEL.ceiling;\r\n        ctx.fillRect(dx + x, dy + 0, 1, y);\r\n\r\n        // Floor\r\n        ctx.fillStyle = LEVEL.floor;\r\n        ctx.fillRect(dx + x, dy + y + height, 1, y);\r\n\r\n        // Wall\r\n        if (!RENDER_SPRITES || !ray.sprite) {\r\n            ctx.fillStyle = ray.color ?? '#000';\r\n            ctx.fillRect(dx + x, dy + y, 1, height);\r\n        } else {\r\n            ctx.drawImage(spritesheet, ray.sprite.x + ray.spriteX, ray.sprite.y, 1, SPRITE_SIZE, dx + x, dy + y, 1, height);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @param {CanvasRenderingContext2D} ctx \r\n * @param {*} rays \r\n * @param {*} objects \r\n * @param {*} dx \r\n * @param {*} dy \r\n * @param {*} dw \r\n * @param {*} dh \r\n * @returns \r\n */\r\nfunction renderObjects(ctx, rays, visibleCells, objects, dx, dy, dw, dh) {\r\n\r\n    let visibleObjects = objects.flatMap((row, y) => row.filter((obj, x) => obj && visibleCells[y][x]));\r\n\r\n    // Sort the objects by distance, furthest to nearest.\r\n    visibleObjects = visibleObjects.map(obj => [Vector.distance(player.x, player.y, obj.x, obj.y), obj]).sort((a, b) => b[0] - a[0]).map(x => x[1]);\r\n\r\n    for (let i = 0; i < visibleObjects.length; i++) {\r\n\r\n        const object = visibleObjects[i];\r\n\r\n        if (!object) {\r\n            continue;\r\n        }\r\n\r\n        // Calculate where the sprite is to be rendered in 3D space\r\n        const angle = fixAngle(player.angle - Math.atan2(object.y - player.y, object.x - player.x));\r\n        const spriteDistance = Vector.distance(player.x, player.y, object.x, object.y);\r\n        const distance = getViewCorrectedDistance(spriteDistance, player.angle + angle, player.angle);\r\n        const size = dh / distance * WALL_HEIGHT_RATIO;\r\n        const x = Math.floor(dw / 2 - size / 2 - angle * dw / FOV);\r\n\r\n        // The left or right may be blocked by walls, so we need to find an x offset and a width of what is to be actually drawn.\r\n        let slice = null;\r\n\r\n        for (let j = 0; j < size; j++) {\r\n            if (x + j >= 0 && x + j < rays.length && rays[x + j].distance > distance) {\r\n                if (!slice) {\r\n                    slice = {\r\n                        sx: object.sprite.x + Math.floor(SPRITE_SIZE / size * j),\r\n                        dx: dx + x + j,\r\n                        w: 0\r\n                    };\r\n                }\r\n                slice.w++;\r\n            } else if (slice) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (slice) {\r\n            // Draw the sprite.\r\n            ctx.drawImage(spritesheet,\r\n                slice.sx, object.sprite.y, Math.floor(64 / size * slice.w), SPRITE_SIZE,\r\n                slice.dx, dy + dh / 2 - size / 2, slice.w, size)\r\n        }\r\n\r\n    }\r\n}\r\n\r\nfunction renderPlayer(ctx, player, dx, dy, dw, dh) {\r\n    \r\n    if (!player.weapon) {\r\n        return;\r\n    }\r\n\r\n    const spriteIndex = Math.floor(player.weapon.sprite.length * player.weapon.position);\r\n    const sprite = player.weapon.sprite[spriteIndex];\r\n\r\n    ctx.drawImage(spritesheet, sprite.x, sprite.y, SPRITE_SIZE, SPRITE_SIZE, dx + (dw - dh) / 2, dy, dh, dh);\r\n}\r\n\r\n/**\r\n * \r\n * @param {CanvasRenderingContext2D} ctx \r\n * @param {*} map \r\n * @param {*} rays \r\n * @param {*} largeMap \r\n */\r\nfunction renderMap(ctx, map, rays, largeMap) {\r\n\r\n    const scale = Math.floor(SCREEN_HEIGHT / WALLS.length / 2);\r\n    const width = map[0].length * scale;\r\n    const height = map.length * scale;\r\n    const left = Math.floor(SCREEN_WIDTH / 2 - width / 2);\r\n    const top = Math.floor(SCREEN_HEIGHT / 2 - height / 2);\r\n    const position = new Vector(player.x, player.y).multiply(scale).add(left, top);\r\n    const radius = scale * MINIMAP_CELLRADIUS;\r\n    const translate = new Vector(0, 0).subtract(position).add(radius).add(scale, SCREEN_HEIGHT - radius * 2 - scale);\r\n\r\n    if (!largeMap) {\r\n\r\n        // Translate and clip to a circle\r\n        ctx.save();\r\n        ctx.translate(translate.x, translate.y);\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeStyle = 'white';\r\n        ctx.beginPath();\r\n        ctx.arc(position.x, position.y, radius, 0, DOUBLE_PI);\r\n        ctx.stroke();\r\n        ctx.clip();\r\n    }\r\n\r\n    // Set globalAlpha\r\n    ctx.globalAlpha = MINIMAP_ALPHA;\r\n\r\n    // Floors\r\n    ctx.fillStyle = '#bbb';\r\n    ctx.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\r\n\r\n    // Walls / Push Walls\r\n    for (let y = 0; y < map.length; y++) {\r\n        for (let x = 0; x < map[0].length; x++) {\r\n\r\n            if (VISIBILITY[y][x] === 0) {\r\n                continue;\r\n            }\r\n\r\n            const wall = map[y][x];\r\n            const pushWall = PUSHWALLS[y][x];\r\n\r\n            if (wall) {\r\n                ctx.fillStyle = wall.color;\r\n                ctx.fillRect(left + x * scale, top + y * scale, scale, scale);\r\n            }\r\n\r\n            if (pushWall) {\r\n                ctx.fillStyle = pushWall.color;\r\n                ctx.fillRect(left + (x + pushWall.position * pushWall.dirX) * scale, top + (y + pushWall.position * pushWall.dirY) * scale, scale, scale);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Doors\r\n    for (let y = 0; y < DOORS.length; y++) {\r\n        for (let x = 0; x < DOORS[0].length; x++) {\r\n\r\n            const door = DOORS[y][x];\r\n\r\n            if (!door || VISIBILITY[y][x] === 0) {\r\n                continue;\r\n            }\r\n\r\n            ctx.fillStyle = door.color;\r\n\r\n            if (map[y - 1][x]) {\r\n                // Vertical door\r\n                ctx.fillRect(left + x * scale + scale / 3, top + (y + door.position) * scale, scale / 3, scale * (1 - door.position));\r\n            } else {\r\n                // Horizontal door\r\n                ctx.fillRect(left + (x + door.position) * scale, top + y * scale + scale / 3, scale * (1 - door.position), scale / 3);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // Rays\r\n    if (MINIMAP_RAYS) {\r\n\r\n        ctx.globalAlpha = .025;\r\n\r\n        ctx.strokeStyle = 'rgb(255, 255, 0)';\r\n        ctx.lineWidth = 1;\r\n\r\n        ctx.beginPath();\r\n\r\n        for (let i = 0; i < rays.length; i++) {\r\n\r\n            const ray = rays[i];\r\n            const destination = new Vector(Math.cos(ray.angle), Math.sin(ray.angle)).multiply(ray.distance).multiply(scale).add(position);\r\n\r\n            ctx.moveTo(position.x, position.y);\r\n            ctx.lineTo(destination.x, destination.y);\r\n        }\r\n\r\n        ctx.stroke();\r\n\r\n        ctx.globalAlpha = MINIMAP_ALPHA;\r\n    }\r\n\r\n    // Torso\r\n    ctx.fillStyle = 'black';\r\n    ctx.beginPath();\r\n    ctx.ellipse(position.x, position.y, PLAYER_SIZE * scale * 2, PLAYER_SIZE * scale / 3 * 2, player.angle + HALF_PI, 0, DOUBLE_PI)\r\n    ctx.fill();\r\n\r\n    // Direction\r\n    const destination = new Vector(Math.cos(player.angle), Math.sin(player.angle)).multiply(PLAYER_SIZE * scale * 2).add(position);\r\n    ctx.strokeStyle = 'black';\r\n    ctx.lineWidth = 1;\r\n    ctx.beginPath();\r\n    ctx.moveTo(position.x, position.y);\r\n    ctx.lineTo(destination.x, destination.y);\r\n    ctx.stroke();\r\n\r\n    // Head\r\n    ctx.fillStyle = 'orange';\r\n    ctx.beginPath();\r\n    ctx.arc(position.x, position.y, PLAYER_SIZE * scale / 4 * 2, 0, DOUBLE_PI);\r\n    ctx.fill();\r\n\r\n    // Reset globalAlpha\r\n    ctx.globalAlpha = 1;\r\n\r\n    // Restore the context\r\n    if (!largeMap) {\r\n        ctx.restore();\r\n    }\r\n}\r\n\r\nfunction renderOsd(ctx) {\r\n\r\n    ctx.fillStyle = OSD_BACKGORUND;\r\n    ctx.fillRect(SCREEN_SAFEZONE, SCREEN_SAFEZONE, SCREEN_WIDTH - SCREEN_SAFEZONE * 2, OSD_HEIGHT);\r\n}\r\n\r\nfunction renderFps(ctx, fps) {\r\n\r\n    ctx.font = OSD_FONT;\r\n    ctx.fillStyle = OSD_COLOR;\r\n\r\n    ctx.textAlign = 'right';\r\n    ctx.textBaseline = 'middle';\r\n\r\n    ctx.fillText(`${fps} FPS`, SCREEN_WIDTH - SCREEN_SAFEZONE * 2, SCREEN_SAFEZONE + OSD_MIDDLE);\r\n}\r\n\r\nfunction renderCoordinates(ctx) {\r\n\r\n    ctx.font = OSD_FONT;\r\n    ctx.fillStyle = OSD_COLOR;\r\n\r\n    ctx.textAlign = 'left';\r\n    ctx.textBaseline = 'middle';\r\n\r\n    ctx.fillText(`${player.x.toFixed(0)},${player.y.toFixed(0)} ${(player.angle).toFixed(2)}`, SCREEN_SAFEZONE * 2, SCREEN_SAFEZONE + OSD_MIDDLE);\r\n}\r\n\r\nfunction renderMessage(ctx, text) {\r\n\r\n    ctx.font = OSD_FONT;\r\n    ctx.fillStyle = OSD_COLOR;\r\n\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n\r\n    ctx.fillText(text, SCREEN_WIDTH / 2, SCREEN_SAFEZONE + OSD_MIDDLE);\r\n}\r\n\r\nfunction clearAround(ctx, x, y, w, h) {\r\n\r\n    ctx.clearRect(0, 0, SCREEN_WIDTH, y);\r\n    ctx.clearRect(0, y, x, h);\r\n    ctx.clearRect(x + w, y, x, h);\r\n    ctx.clearRect(0, y + h, SCREEN_WIDTH, y);\r\n}\r\n\r\nfunction fillRectAround(ctx, x, y, w, h) {\r\n\r\n    // Top\r\n    ctx.fillRect(0, 0, SCREEN_WIDTH, y);\r\n    // Left\r\n    ctx.fillRect(0, y, x, h);\r\n    // Right\r\n    ctx.fillRect(x + w, y, SCREEN_WIDTH - x + w, h);\r\n    // Bottom\r\n    ctx.fillRect(0, y + h, SCREEN_WIDTH, SCREEN_HEIGHT - y + h);\r\n}\r\n\r\nfunction drawInset(ctx, x, y, w, h, lineWidth, color, shadowColor) {\r\n\r\n    const offset = lineWidth / 2;\r\n\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.strokeStyle = shadowColor;\r\n    ctx.beginPath();\r\n    ctx.moveTo(x - offset, y + h + offset);\r\n    ctx.lineTo(x - offset, y - offset);\r\n    ctx.lineTo(x + w + offset, y - offset);\r\n    ctx.stroke();\r\n\r\n    ctx.strokeStyle = color;\r\n    ctx.beginPath();\r\n    ctx.moveTo(x + w + offset, y - offset);\r\n    ctx.lineTo(x + w + offset, y + h + offset);\r\n    ctx.lineTo(x - offset, y + h + offset);\r\n    ctx.stroke();\r\n}"],"names":["Vector","constructor","x","y","this","add","operate","subtract","multiply","divide","operation","distance","vector","toArray","x1","y1","x2","y2","Math","sqrt","pow","getSpritesheetCoordinates","index","cols","size","floor","mapLiteralToSpriteObject","spriteObjects","shared","coordinates","row","split","map","col","undefined","parseInt","wallSprites","color","darkColor","sprite","darkSprite","next","key","Object","hasOwnProperty","call","wallSprite","doorSprites","frameColor","frameDarkColor","frameSprite","frameDarkSprite","action","position","ticks","objectSprites","solid","keys","forEach","spawn","ceiling","walls","pushWalls","dirX","dirY","doors","objects","spriteUrl","createLevel","sampleSize","value","_sample_","_index_","_lastTick_","tick","performance","now","fps","round","average","i","length","PerformanceCounter","name","samples","min","max","history","draw","ctx","lineColor","textColor","width","height","reduce","a","diffY","mid","avg","padding","axisLabelFontSize","axisLabelTickWidth","graphWidth","axisLabelYStep","font","textAlign","strokeStyle","axisLabelTickX","axisLabelTickY","axisLabelX","beginPath","moveTo","lineTo","stroke","textBaseline","fillText","toFixed","fillStyle","fillRect","lineWidth","strokeRect","graphScaleX","graphHeight","graphLeft","graphBottom","toUpperCase","start","lastP","stop","delta","pop","unshift","PI","DOUBLE_PI","HALF_PI","QUARTER_PI","DEG_TO_PI","SCREEN_WIDTH","SCREEN_HEIGHT","FOV","WALL_HEIGHT_RATIO","SPRITE_SIZE","OSD_COLOR","OSD_FONT","PLAYER_SIZE","TURN_RADIUS","WEAPONS","isFiring","PLAYER_DEFAULT","angle","speed","side","weapon","SHOW_DEBUG","JSON","parse","localStorage","getItem","SHOW_GRAPHS","RENDER_SPRITES","RENDER_INTERLACED","WALL_COLLISION","GAME_DISPLAY","window","addEventListener","e","setItem","stringify","player","LEVEL","level_1_1","WALLS","PUSHWALLS","DOORS","OBJECTS","VISIBILITY","spritesheet","Image","src","onload","mapY","mapX","door","floodFillMinimap","requestAnimationFrame","loop","startGame","canvas","document","getElementById","getContext","imageSmoothingEnabled","messageTextTimeoutId","messageText","setMessageText","messageOrSettingName","settingValue","clearTimeout","setTimeout","controls","up","down","left","right","turbo","stealth","strafe","fire","pause","keyboardToControlMap","KeyW","KeyA","KeyS","KeyD","KeyZ","KeyX","ArrowUp","ArrowLeft","ArrowDown","ArrowRight","ShiftLeft","Space","keyboardToControlToggleMap","Escape","keyboardToFunctionMap","Digit1","Digit2","Digit3","Digit4","Digit5","KeyM","KeyU","KeyG","KeyI","KeyO","BracketLeft","KeyP","KeyR","NumpadAdd","NumpadSubtract","code","console","log","frameCounter","lastPerf","calcPerf","drawPerf","gx","gy","gw","gh","rays","timeScale","fixAngle","actionX","cos","actionY","sin","pushWall","dy","dx","getDirection","wall","moveX","moveY","tryMovePlayer","movePlayer","moveDoors","movePushWalls","update","w","step","visibleCells","hCollision","getHorizontalCollision","vCollision","getVerticalCollision","collision","cells","push","getRays","h","clearRect","clearAround","fillRectAround","shadowColor","drawInset","save","rect","clip","dw","dh","increment","ray","getViewCorrectedDistance","drawImage","spriteX","renderScene","visibleObjects","flatMap","filter","obj","sort","b","object","atan2","slice","j","sx","renderObjects","spriteIndex","renderPlayer","restore","largeMap","scale","top","radius","translate","arc","globalAlpha","ellipse","fill","destination","renderMap","renderOsd","SCREEN_SAFEZONE","renderCoordinates","renderFps","text","renderMessage","render","PERFORMANCE_Y","error","isOutOfBounds","viewAngle","playerAngle","difference","sy","abs","tan","stepY","stepX","halfStepX","halfStepY","nextX","nextY","spriteOffsetX","cellX","cellY","adjacentDoor","pushWallY","pushWallX","vertical","xl","yl","xh","yh"],"sourceRoot":""}